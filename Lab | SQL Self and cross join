-- Lab | SQL Self and cross join


-- Get all pairs of actors that worked together.

create temporary table sakila.actors_same_movie
SELECT fa1.actor_id as actor_1, fa2.actor_id as actor_2 , fa1.film_id
FROM sakila.film_actor fa1
join sakila.film_actor fa2
on fa1.actor_id <> fa2.actor_id
where fa1.film_id = fa2.film_id
and fa1.actor_id < fa2.actor_id
order by fa1.film_id;


select actors_same_movie.actor_1,  a1.first_name, a1.last_name, 
actors_same_movie.actor_2,
actors_same_movie.film_id, a2.first_name, a2.last_name
from 
sakila.actors_same_movie
join sakila.actor a1 on actors_same_movie.actor_1 = sakila.a1.actor_id
join sakila.actor a2 on actors_same_movie.actor_2 = sakila.a2.actor_id;


-- Get all pairs of customers that have rented the same film more than 3 times.


create temporary table sakila.customer_movie_rentals_a
SELECT inventory.film_id, rental.customer_id
FROM sakila.inventory
join sakila.rental
on inventory.inventory_id = rental.inventory_id;

create temporary table sakila.customer_movie_rentals_b
SELECT inventory.film_id, rental.customer_id
FROM sakila.inventory
join sakila.rental
on inventory.inventory_id = rental.inventory_id;

select count(t1.film_id) as counts_, t1.customer_id as customer_a, t2.customer_id as customer_b
from sakila.customer_movie_rentals_a t1
join sakila.customer_movie_rentals_b t2
on t1.customer_id <> t2.customer_id 
and t1.film_id = t2.film_id
group by 2, 3
having counts_ > 3;


-- Get all possible pairs of actors and films.

select * from
sakila.actor a
cross join sakila.film f;
